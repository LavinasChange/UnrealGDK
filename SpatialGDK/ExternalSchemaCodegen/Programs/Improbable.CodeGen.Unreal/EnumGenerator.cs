using Improbable.CodeGen.Base;
using System;
using System.Linq;
using System.Text;

namespace Improbable.CodeGen.Unreal
{
    static class EnumGenerator
    {
        private static string DefaultEnumHeaderIncludes = string.Join(Environment.NewLine, new[]{
            "#include <cstdint>",
            "#include <functional>",
        });

        public static string GenerateTopLevelEnum(EnumDefinition enumDefinition, Bundle bundle)
        {
            var enumNamespace = Text.GetNamespaceFromTypeName(enumDefinition.Identifier.QualifiedName);
            var builder = new StringBuilder();

            builder.AppendLine($"// Generated by {UnrealGenerator.GeneratorTitle}");
            builder.Append(Environment.NewLine);

            builder.AppendLine($"#pragma once");
            builder.Append(Environment.NewLine);

            builder.AppendLine(DefaultEnumHeaderIncludes);
            builder.Append(Environment.NewLine);

            builder.AppendLine(string.Join(Environment.NewLine, enumNamespace.Select(t => $"namespace {t} {{")));
            builder.AppendLine(GenerateEnum(enumDefinition.Identifier.Name, enumDefinition, bundle));
            builder.AppendLine(string.Join(Environment.NewLine, enumNamespace.Reverse().Select(t => $"}} // namespace {t}")));

            return builder.ToString();
        }
        
        public static string GenerateEnum(string name, EnumDefinition enumDefinition, Bundle bundle)
        {
            var sourceRef = bundle.SchemaBundle.SourceMapV1.SourceReferences[enumDefinition.Identifier.QualifiedName];
            var builder = new StringBuilder();

            builder.AppendLine($"// Generated from {sourceRef.FilePath}({sourceRef.Line},{sourceRef.Column})");
            builder.AppendLine($"enum class {name} : uint32");
            builder.AppendLine("{");
            builder.AppendLine(Text.Indent(1, string.Join(Environment.NewLine, enumDefinition.ValueDefinitions.Select(v => $"{v.Identifier.Name} = {v.Value},")).ToString().TrimEnd()));
            builder.AppendLine("};");

            return builder.ToString();
        }
    }
}
